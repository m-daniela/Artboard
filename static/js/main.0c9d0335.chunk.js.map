{"version":3,"sources":["components/iterator/Iterator.js","components/helpers/Constants.js","components/helpers/Context.js","components/Board.js","components/model/Model.js","components/model/Draggable.js","components/factory/DraggableComponents.js","components/factory/SimpleComponents.js","components/Side.js","App.js","reportWebVitals.js","index.js"],"names":["Iterator","collection","first","stack","length","undefined","hasNext","getElements","next","current","pop","visited","push","forEach","elem","isDraggable","item","parentOf","id","nextElement","filter","this","reverse","slice","commands","getId","Math","floor","random","BoardContext","createContext","reducer","state","action","type","element","BoardProvider","props","useReducer","elements","dispatch","React","useState","selected","setSelected","setCurrent","Provider","value","getElement","iterator","removeSelection","classList","remove","children","Board","useContext","className","onClick","e","target","parentNode","add","map","display","Image","url","getName","name","src","alt","Note","text","onDoubleClick","focus","placeholder","Group","addElement","removeElement","elementId","Draggable","draggable","onMouseOver","drag","document","getElementById","pos1","pos2","pos3","pos4","elementDrag","preventDefault","clientX","clientY","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","onmousedown","draggableComponents","id1","id2","img","note","group","grp","simpleComponents","Side","setUrl","setGroup","error","setError","download","setDownload","selectedElement","setSelectedElement","disable","useEffect","boardScreenshot","querySelector","saveLink","htmlToImage","then","result","click","catch","err","console","log","saveBoard","href","hidden","onSubmit","parent","disabled","onChange","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0c9d0335.chunk.js","sourcesContent":["\r\n/**\r\n * Iterator class for the state\r\n * It needs to go in depth, since the Group elements can have \r\n * more children and Groups inside, each having more children\r\n * @param {*} collection the tree of components that need to \r\n * be displayed\r\n */\r\nexport class Iterator{\r\n    constructor(collection){\r\n        this.visited = [];\r\n        this.stack = collection.reverse().slice(0, collection.length);\r\n    }\r\n\r\n    /**\r\n     * return the first element from the collection if exists, \r\n     * otherwise return undefined\r\n     * @returns the first element | undefined\r\n     */\r\n    first = () =>{\r\n        return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;\r\n    }\r\n\r\n    /**\r\n     * check if there still is an element on the surface,\r\n     * otherwise, if the current element is a Group, check \r\n     * it's children, otherwise return undefined\r\n     * @returns true | false\r\n     */\r\n    hasNext = () =>{\r\n        return this.stack.length > 0 || this.stack[this.stack.length - 1]?.getElements !== undefined;\r\n    }\r\n\r\n    /**\r\n     * get the next element\r\n     * perform depth first search on the collection\r\n     * treat the Draggable element separately, since it is a \r\n     * container itself\r\n     * @returns the element, if found\r\n     */\r\n    next = () => {\r\n        if (this.hasNext()){\r\n            const current = this.stack.pop();\r\n\r\n            this.visited.push(current);\r\n            if(current?.getElements !== undefined){\r\n                current.getElements().forEach((elem) => this.stack.push(elem));\r\n            }\r\n            else if(current?.isDraggable() && current?.item.getElements !== undefined){\r\n                current.item.getElements().forEach((elem) => this.stack.push(elem));\r\n            }\r\n            return current;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * obtain the parent of the element with the given id \r\n     * treat the Draggable case separately because you need \r\n     * to extract the base element from the container\r\n     * @param {*} id \r\n     * @returns parent of element with id | undefined\r\n     */\r\n    parentOf = id =>{\r\n        id = +id;\r\n        \r\n        while(this.hasNext()){\r\n            const nextElement = this.next();\r\n            if (nextElement.getElements !== undefined){\r\n                const result = nextElement.getElements().filter(elem => +elem.id === id);\r\n                if (result.length > 0){\r\n                    return nextElement;\r\n                }\r\n            }\r\n            else if(nextElement?.isDraggable() && nextElement?.item.getElements !== undefined){\r\n                const result = nextElement.item.getElements().filter(elem => +elem.id === id);\r\n                if (result.length > 0){\r\n                    return nextElement.item;\r\n                }\r\n            }\r\n        }    \r\n    }\r\n}","\r\nexport const commands = {\r\n    add: \"ADD\",\r\n    delete: \"DELETE\",\r\n    undo: \"UNDO\",\r\n    redo: \"REDO\"\r\n};\r\n\r\nexport const getId = () => Math.floor(Math.random() * 100000);\r\n","import React, {useReducer, createContext} from 'react';\r\nimport { Iterator } from '../iterator/Iterator';\r\nimport { commands } from './Constants';\r\n\r\n/**\r\n * Board context\r\n * Holds the state of the board and the CRUD logic\r\n */\r\nexport const BoardContext = createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n    case (commands.add): \r\n        return [...state, action.item];\r\n    case (commands.delete): \r\n        return state.filter(element => +element.id !== +action.item);\r\n    default: \r\n        return state;\r\n    }\r\n};\r\n\r\n\r\nconst BoardProvider = (props) => {\r\n    const state = [];\r\n    const [elements, dispatch] = useReducer(reducer, state);\r\n    const [selected, setSelected] = React.useState(null);\r\n    const [current, setCurrent] = React.useState(null);\r\n\r\n    // returns the element with the given ID, using the iterator\r\n    const getElement = id =>{\r\n        const iterator = new Iterator(elements.slice(0, elements.length));\r\n        let current = iterator.first();\r\n        if (+current?.id !== +id){\r\n            while (iterator.hasNext()){\r\n                const next = iterator.next();\r\n                if(+next.id === +id){\r\n                    return next;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            return current;\r\n        }\r\n    };\r\n\r\n    // set the selected item to null and remove\r\n    // the highlight\r\n    const removeSelection = () =>{\r\n        if (current){\r\n            current.classList.remove(\"selected\");\r\n            setSelected(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <BoardContext.Provider value={{elements, dispatch, selected, setSelected, getElement, current, setCurrent, removeSelection}}>\r\n            {props.children}\r\n        </BoardContext.Provider>\r\n    );\r\n};\r\n\r\nexport default BoardProvider;","import React from 'react';\r\nimport { BoardContext } from './helpers/Context';\r\n\r\n/**\r\n * Board\r\n * Renders the tree of Components\r\n */\r\nconst Board = () => {\r\n    const {elements, setSelected, setCurrent, removeSelection} = React.useContext(BoardContext);\r\n\r\n    const clickHandler = e =>{\r\n        let target = e.target;\r\n\r\n        // remove \"selected\" from classlist of the currently selected item\r\n        removeSelection();\r\n\r\n        // change the target node to the parent, if it is Draggable\r\n        if (target.parentNode.classList[0] == \"draggable\"){\r\n            target = target.parentNode;\r\n        }\r\n\r\n        setCurrent(target);\r\n\r\n        // don't add the \"selected\" classname to .board\r\n        if (target.classList[0] != \"board\"){\r\n            target.classList.add(\"selected\");\r\n        }\r\n        setSelected(target.id);\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" onClick={clickHandler}>\r\n            {elements.map(elem => elem.display())}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import React from \"react\";\r\n\r\n/**\r\n * The components that are displayed follow a common structure \r\n * (Component interface), having the display() method\r\n * Both the leaf and composite nodes follow this interface\r\n */\r\n\r\n/**\r\n * Image\r\n * Leaf node, displays an image\r\n * @param {number} id id of the component\r\n * @param {string} url url of the image that is displayed\r\n * @param {string} name name of the component\r\n */\r\nexport class Image{\r\n    constructor(id, url){\r\n        this.id = id;\r\n        this.url = url;\r\n        this.name = \"Image\";\r\n    }\r\n\r\n    isDraggable = () => false;\r\n\r\n    getName = () =>{\r\n        return this.name;\r\n    }\r\n\r\n    display = () => {\r\n        return <img src={this.url} className=\"item\" alt=\"img\" key={this.id} id={this.id} />;\r\n    }\r\n}\r\n\r\n/**\r\n * Note\r\n * Leaf node, displays a textarea box\r\n * @param {number} id id of the component\r\n * @param {string} text placeholder text\r\n * @param {string} name name of the component\r\n */\r\nexport class Note{\r\n    constructor(id, text=\"Your notes...\"){\r\n        this.id = id;\r\n        this.text = text;\r\n        this.name = \"Note\";\r\n    }\r\n\r\n    isDraggable = () => false;\r\n\r\n    getName = () =>{\r\n        return this.name;\r\n    }\r\n\r\n    display = () => {\r\n        return <textarea className=\"item\" key={this.id} id={this.id} onDoubleClick={(e) => e.target.focus()} placeholder={this.text}/>;\r\n    }\r\n}\r\n\r\n/**\r\n * Group\r\n * Composite node\r\n * It has methods that work with the array of elements and calls the \r\n * display method for each of them\r\n * @param {number} id id of the component\r\n * @param {string} name name of the component\r\n * @param {Component[]} elements the children of the composite component\r\n */\r\nexport class Group{\r\n    constructor(id, name){\r\n        this.id = id;\r\n        this.name = name === \"\" ? \"Group\" : name;\r\n        this.elements = [];\r\n    }\r\n\r\n    isDraggable = () => false;\r\n\r\n    getName = () =>{\r\n        return this.name;\r\n    }\r\n\r\n    addElement = element =>{\r\n        this.elements.push(element);\r\n    }\r\n\r\n    removeElement = elementId =>{\r\n        this.elements = this.elements.filter(elem => +elem.id !== +elementId);\r\n    }\r\n\r\n    getElements = () => this.elements;\r\n\r\n    display = () => {\r\n        return (\r\n            <div className=\"group item\" key={this.id} id={this.id}>\r\n                {/* <span>{this.name}</span> */}\r\n                {this.name}\r\n                {this.elements.map(elem => elem.display())}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\n// decorator class\r\n// a wrapper to create a draggable object\r\n\r\n\r\n/**\r\n * Decorator class\r\n * A wrapper (div) over the given Component to create \r\n * draggable Components. The display method acts the same\r\n * @param {number} id id of the component\r\n * @param {Component} item the component it wraps\r\n */\r\nexport class Draggable{\r\n    constructor(id, item){\r\n        this.id = id;\r\n        this.item = item;\r\n        this.name = `Draggable ${item.name}`;\r\n    }\r\n\r\n    isDraggable = () => true;\r\n\r\n    getName = () =>{\r\n        return this.name;\r\n    }\r\n\r\n    display = () =>{\r\n        return <div className=\"draggable item\" id={this.id} key={this.id} draggable={true} onMouseOver={() => this.drag(this.id)}>{this.item.display()}</div>;\r\n    }\r\n\r\n    /**\r\n     * add the drag property to the wrapper div\r\n     * @param {number} id the id of the wrapper that needs to \r\n     * be dragged around\r\n     */\r\n    drag = (id) => {\r\n        const element = document.getElementById(id);\r\n\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let pos3 = 0;\r\n        let pos4 = 0;\r\n    \r\n        const dragMouseDown = (e) =>{\r\n            e.preventDefault();\r\n            pos3 = e.clientX;\r\n            pos4 = e.clientY;\r\n            document.onmouseup = closeDragElement;\r\n            document.onmousemove = elementDrag;\r\n        };\r\n    \r\n        const elementDrag = (e) => {\r\n            e.preventDefault();\r\n            pos1 = pos3 - e.clientX;\r\n            pos2 = pos4 - e.clientY;\r\n            pos3 = e.clientX;\r\n            pos4 = e.clientY;\r\n            element.style.top = (element.offsetTop - pos2) + \"px\";\r\n            element.style.left = (element.offsetLeft - pos1) + \"px\";\r\n        };\r\n    \r\n        const closeDragElement = () => {\r\n            document.onmouseup = null;\r\n            document.onmousemove = null;\r\n        };\r\n    \r\n        element.onmousedown = dragMouseDown;\r\n    }\r\n}","import { Note, Image, Group } from \"../model/Model\";\r\nimport { Draggable } from \"../model/Draggable\";\r\nimport { getId } from \"../helpers/Constants\";\r\n\r\n/** Factory for draggable components */\r\n\r\nconst createImage = (url) =>{\r\n    const id1 = getId();\r\n    const id2 = getId();\r\n    const img = new Image(id1, url);\r\n    return new Draggable(id2, img);\r\n};\r\n\r\nconst createNote = () => {\r\n    const id1 = getId();\r\n    const id2 = getId();\r\n    const note = new Note(id1, \"Your notes (double click to activate)...\");\r\n    return new Draggable(id2, note);\r\n};\r\n\r\nconst createGroup = (group) => {\r\n    const id1 = getId();\r\n    const id2 = getId();\r\n    const grp = new Group(id1, group);\r\n    return new Draggable(id2, grp);\r\n};\r\n\r\nexport const draggableComponents = {\r\n    createImage,\r\n    createNote,\r\n    createGroup,\r\n};","import { Note, Image, Group } from \"../model/Model\";\r\nimport { getId } from \"../helpers/Constants\";\r\n\r\n/** Factory for simple components */\r\n\r\nconst createImage = (url) =>{\r\n    const id = getId();\r\n    return new Image(id, url);\r\n};\r\n\r\nconst createNote = () => {\r\n    const id = getId();\r\n    return new Note(id);\r\n};\r\n\r\nconst createGroup = (group) => {\r\n    const id = getId();\r\n    return new Group(id, group);\r\n};\r\n\r\nexport const simpleComponents = {\r\n    createImage,\r\n    createNote,\r\n    createGroup,\r\n};","import React from 'react';\r\nimport { commands } from './helpers/Constants';\r\nimport { BoardContext } from './helpers/Context';\r\nimport { draggableComponents } from \"./factory/DraggableComponents\";\r\nimport { simpleComponents } from \"./factory/SimpleComponents\";\r\nimport { Iterator } from './iterator/Iterator';\r\nimport * as htmlToImage from \"html-to-image\";\r\n\r\n/**\r\n * Side\r\n * Renders the buttons and logic for Component manipulation\r\n */\r\nconst Side = () => {\r\n    const {dispatch, selected, setSelected, getElement, elements, removeSelection} = React.useContext(BoardContext);\r\n    const [url, setUrl] = React.useState(\"\");\r\n    const [group, setGroup] = React.useState(\"\");\r\n    const [error, setError] = React.useState(\"\");\r\n    const [download, setDownload] = React.useState(\"\");\r\n    const [selectedElement, setSelectedElement] = React.useState(\"\");\r\n    const disable = selected === 0;\r\n\r\n    /**\r\n     * subscribe to see when another component is selected\r\n     * and update based on the new selected id\r\n     */\r\n    React.useEffect(() => {\r\n        if (selected !== 0 && selected !== undefined){\r\n            const elem = getElement(selected);\r\n            setSelectedElement(elem);\r\n        }\r\n    }, [selected, getElement]);\r\n        \r\n\r\n    /**\r\n     * add a new element to the component tree\r\n     * @param {Component} item the item to be added \r\n     * */\r\n    const add = (item) =>{\r\n        if (selected){\r\n            // check if it is a static group\r\n            if (selectedElement?.elements !== undefined){\r\n                selectedElement.addElement(item);\r\n            }\r\n            // check if it is draggable\r\n            else if(selectedElement?.isDraggable() && selectedElement?.item.elements !== undefined){\r\n                selectedElement.item?.addElement(item);\r\n            }\r\n            else{\r\n                dispatch({type: commands.add, item});\r\n            }\r\n            removeSelection();\r\n            setSelected(null);\r\n               \r\n        }\r\n        else{\r\n            dispatch({type: commands.add, item});\r\n            setSelected(null);\r\n        }\r\n    };\r\n\r\n    /** Add the simple elements */\r\n    \r\n    const addImage = () =>{\r\n        if (url !== \"\"){\r\n            const item = simpleComponents.createImage(url);\r\n            add(item);\r\n            setUrl(\"\");\r\n            setError(\"\");\r\n        }\r\n        else{\r\n            setError(\"Please provide an URL\");\r\n        }\r\n        \r\n    };\r\n\r\n    const addNote = () =>{\r\n        const item = simpleComponents.createNote();\r\n        add(item);\r\n    };\r\n\r\n    const addGroup = () =>{\r\n        const item = simpleComponents.createGroup(group);\r\n        add(item);\r\n        setGroup(\"\");\r\n    };\r\n\r\n    /** Add the draggable elements */\r\n\r\n    const addDraggableImage = () =>{\r\n        const item = draggableComponents.createImage(url);\r\n        dispatch({type: commands.add, item});\r\n        setUrl(\"\");\r\n    };\r\n\r\n    const addDraggableNote = () =>{\r\n        const item = draggableComponents.createNote();\r\n        dispatch({type: commands.add, item});\r\n    };\r\n\r\n    const addDraggableGroup = () =>{\r\n        const item = draggableComponents.createGroup(group);\r\n        dispatch({type: commands.add, item});\r\n    };\r\n\r\n    /** \r\n     * Remove the selected item\r\n     * If the item has a parent, then it is a group, so you call the \r\n     * removeElement method from the class, otherwise you remove it \r\n     * from the state\r\n     */\r\n    const removeItem = () =>{\r\n        try{\r\n            const iterator = new Iterator(elements.slice(0, elements.length));\r\n            const parent = iterator.parentOf(selected);\r\n            console.log(parent);\r\n            if (parent !== undefined){\r\n                parent.removeElement(selected);\r\n            }\r\n            else{\r\n                console.log(\"elems\", elements);\r\n                dispatch({type: commands.delete, item: selected});\r\n            }\r\n            setSelected(null);\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Save the configuration of the board to disk using the \r\n     * html-to-image package\r\n     * The resulting base64 encoding of the image is set to a \r\n     * hidden anchor tag, which is programatically clicked when \r\n     * the conversion to image is done \r\n     * @param {*} e \r\n     */\r\n    const saveBoard = (e) => {\r\n        e.preventDefault();\r\n        const boardScreenshot = document.querySelector(\".board\");\r\n        const saveLink = document.querySelector(\"#save_board\");\r\n        removeSelection();\r\n\r\n        htmlToImage.toPng(boardScreenshot)\r\n            .then((result) => {\r\n                setDownload(result);\r\n                saveLink.click();\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    return (\r\n        <div className=\"side\">\r\n            <form>\r\n                <button onClick={e => saveBoard(e)}>Save board</button>\r\n                <a id=\"save_board\" href={download} download=\"board.png\" hidden>Click to save</a>\r\n            </form>\r\n            <form className=\"remove\" onSubmit={e => e.preventDefault()}>\r\n                <span>{selectedElement?.name} {selected}</span>\r\n                <button onClick={removeItem} disabled={disable}>Delete</button>\r\n            </form>\r\n            <form className=\"add_image\" onSubmit={e => e.preventDefault()}>\r\n                <button onClick={addImage}>Image</button>\r\n                <button onClick={addDraggableImage}>Draggable image</button>\r\n                <label>\r\n                    URL\r\n                    <input type=\"text\" onChange={(e) => setUrl(e.target.value)} value={url} />\r\n                </label>\r\n                <span>{error}</span>\r\n            </form>\r\n\r\n            <form className=\"add_note\" onSubmit={e => e.preventDefault()}>\r\n                <button onClick={addNote}>Note</button>\r\n                <button onClick={addDraggableNote}>Draggable note <br></br></button>\r\n            </form>\r\n            <form className=\"add_group\" onSubmit={e => e.preventDefault()}>\r\n                <button onClick={addGroup}>Group</button>\r\n                <button onClick={addDraggableGroup}>Draggable group</button>\r\n                <label>\r\n                    Group name\r\n                    <input type=\"text\" onChange={(e) => setGroup(e.target.value)} value={group}/>\r\n                </label>\r\n            </form>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Side;\r\n","import React from 'react';\r\nimport './main.scss';\r\nimport Board from './components/Board';\r\nimport BoardProvider from './components/helpers/Context';\r\nimport Side from './components/Side';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <BoardProvider>\r\n                <Board />\r\n                <Side />\r\n            </BoardProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}